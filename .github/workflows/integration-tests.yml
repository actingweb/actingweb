name: Integration Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with test

      - name: Wait for DynamoDB to be ready
        run: |
          echo "Waiting for DynamoDB to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:8000/ > /dev/null 2>&1; then
              echo "DynamoDB is ready!"
              exit 0
            fi
            echo "Attempt $i: DynamoDB not ready yet, waiting..."
            sleep 2
          done
          echo "DynamoDB failed to start within 60 seconds"
          exit 1

      - name: Run integration tests
        run: |
          poetry run pytest tests/integration/ \
            -v \
            --tb=short \
            --junitxml=test-results/integration-tests.xml \
            --cov=actingweb \
            --cov-report=xml \
            --cov-report=html
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DB_HOST: http://localhost:8000
          AWS_DB_PREFIX: test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-results/*.xml

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
